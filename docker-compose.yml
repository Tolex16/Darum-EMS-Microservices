version: '3.9'

services:
  # üóÑ PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: darum-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: ["postgres", "-c", "max_connections=200"]

  # Initialize databases for each service
  pg-init:
    image: postgres:16-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    entrypoint: ["/bin/sh", "-c"]
    command: >
      psql -h postgres -U postgres -c "CREATE DATABASE authdb;"
      && psql -h postgres -U postgres -c "CREATE DATABASE employeedb;"

  # üß† Zookeeper
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: darum-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10

  # ‚öôÔ∏è Kafka Broker
  kafka:
    image: bitnami/kafka:3.8
    container_name: darum-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  # ‚öôÔ∏è Spring Config Server
  config-server:
    build: ./platform/config-server
    container_name: darum-config
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DARUM_EMS_APP_JWTSECRET: afYx1C2rD8KpZt0vWq9nJ5eRbGsU3mTfXh4pA7sLdV0yN6oQjE1cH8kRzPwB2uF+
    ports:
      - "8888:8888"
    depends_on:
      - postgres
      - kafka

  # üîç Eureka Discovery Service
  discovery-service:
    build: ./platform/discovery-service
    container_name: darum-discovery
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8761:8761"
    depends_on:
      - config-server

  # üåâ API Gateway
  api-gateway:
    build: ./platform/api-gateway
    container_name: darum-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
      - auth-service
      - employee-service

  # üîê Auth Service (Kafka Consumer)
  auth-service:
    build: ./services/auth-service
    container_name: darum-auth
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/authdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_STREAM_DEFAULT_BINDER: kafka
    ports:
      - "8101:8101"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-service:
        condition: service_started
      config-server:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8101/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # üëî Employee Service (Kafka Producer)
  employee-service:
    build: ./services/employee-service
    container_name: darum-employee
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/employeedb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_STREAM_DEFAULT_BINDER: kafka
    ports:
      - "8201:8201"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-service:
        condition: service_started
      config-server:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8201/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  pgdata:
