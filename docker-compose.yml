version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: darum-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: ["postgres", "-c", "max_connections=200"]

  pg-init:
    image: postgres:16-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres
    entrypoint: ["/bin/sh", "-c"]
    command: >
      psql -h postgres -U postgres -c "CREATE DATABASE authdb;"
      && psql -h postgres -U postgres -c "CREATE DATABASE employeedb;"

  redis:
    image: redis:7-alpine
    container_name: darum-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  config-server:
    build: ./platform/config-server
    container_name: darum-config
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DARUM_EMS_APP_JWTSECRET: afYx1C2rD8KpZt0vWq9nJ5eRbGsU3mTfXh4pA7sLdV0yN6oQjE1cH8kRzPwB2uF+
    ports:
      - "8888:8888"
    depends_on:
      - redis
      - postgres

  discovery-service:
    build: ./platform/discovery-service
    container_name: darum-discovery
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8761:8761"
    depends_on:
      - config-server

  api-gateway:
    build: ./platform/api-gateway
    container_name: darum-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
      - auth-service
      - employee-service

  auth-service:
    build: ./services/auth-service
    container_name: darum-auth
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/authdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: redis
      SPRING_CLOUD_STREAM_DEFAULT_BINDER: redis
    ports:
      - "8101:8101"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-service:
        condition: service_started
      config-server:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8101/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  employee-service:
    build: ./services/employee-service
    container_name: darum-employee
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/employeedb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: redis
      SPRING_CLOUD_STREAM_DEFAULT_BINDER: redis
    ports:
      - "8201:8201"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-service:
        condition: service_started
      config-server:
        condition: service_started
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8201/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  pgdata:
  redis_data:
  
  validate-compose:
    name: ðŸ§¾ Validate Compose file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ðŸ§± Check docker-compose syntax
        run: docker compose config
